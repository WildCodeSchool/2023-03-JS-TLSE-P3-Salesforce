@use "./colors" as *;
@use "./typography" as *;
@use "./shadows" as *;

$buttons: (
  "sm": (
    padding: 10px 16px,
    gap: 8px,
    text: sm,
    i-font-size: 1.042rem,
    height: 2rem,
  ),
  "md": (
    padding: 8px 14px,
    gap: 8px,
    text: sm,
    i-font-size: 1.042rem,
    height: 2.5rem,
  ),
  "lg": (
    padding: 10px 18px,
    gap: 8px,
    text: md,
    i-font-size: 1.042rem,
    height: 2.75rem,
  ),
  "xl": (
    padding: 12px 20px,
    gap: 8px,
    text: md,
    i-font-size: 1.042rem,
    height: 3rem,
  ),
  "2xl": (
    padding: 16px 28px,
    gap: 12px,
    text: lg,
    i-font-size: 1.25rem,
    height: 3.75rem,
  ),
);

@mixin button($size, $color: "primary", $style: "solid") {
  @if (
    $size !=
      "sm" and
      $size !=
      "md" and
      $size !=
      "lg" and
      $size !=
      "xl" and
      $size !=
      "2xl"
  ) {
    @error "Invalid button size: #{$size}";
  }

  @if ($style != "solid" and $style != "outline" and $style != "link") {
    @error "Invalid button style: #{$style}";
  }

  display: inline-flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  outline: 0;
  text-decoration: none;

  border: none;
  cursor: pointer;
  $button-size: map-get($buttons, $size);
  @include text(map-get($button-size, text), $weight: 500);

  gap: map-get($button-size, gap);

  i:before {
    line-height: unset;
    font-size: map-get($button-size, i-font-size);
    display: inline-block;
    vertical-align: middle;
  }

  @if ($style == "solid" or $style == "outline") {
    padding: map-get($button-size, padding);
    height: map-get($button-size, height);

    @include shadow("xs");
    border-radius: 8px;

    @if ($style == "solid") {
      color: var(--white);

      background-color: var(--#{$color}-600);
      border: 1px solid var(--#{$color}-600);

      &:hover {
        color: var(--white);
        background-color: var(--#{$color}-700);
      }

      &:focus {
        box-shadow: 0px 1px 2px rgba(var(--#{$color}-950), 0.05),
          0px 0px 0px 4px var(--#{$color}-100);
      }

      &:disabled {
        background-color: var(--#{$color}-100);
        border: none;
        color: var(--white);
      }
    } @else if ($style == "outline") {
      color: var(--#{$color}-700);
      border: 1px solid var(--#{$color}-200);
      background-color: var(--#{$color}-50);

      &:hover {
        background-color: var(--#{$color}-100);
      }
      &:disabled {
        border: 1px solid var(--#{$color}-50);
        color: var(--#{$color}-300);
      }
    }
  } @else if($style == "link") {
    color: var(--#{$color}-700);
    background-color: transparent;

    &:hover {
      color: var(--#{$color}-900);
    }
    &:disabled {
      //   border-color: $grey-500;
      color: var(--#{$color}-400);
    }
  }
}

@each $size, $sizeValue in $buttons {
  @each $color in $themeColors {
    @each $style in ("solid", "outline", "link") {
      .button-#{$size}-#{$color}-#{$style} {
        @include button(
          #{"#{$size}"},
          $color: #{"#{$color}"},
          $style: #{"#{$style}"}
        );
      }
    }
  }
}
